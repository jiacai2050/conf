* Set lexical binding
- https://www.gnu.org/software/emacs/manual/html_node/elisp/Using-Lexical-Binding.html#Using-Lexical-Binding
#+begin_src emacs-lisp
;;; -*- lexical-binding: t; -*-
#+end_src
* Email
- https://gist.github.com/dabrahams/3030332
- http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/
- https://github.com/munen/emacs.d/#mu4e
- https://jherrlin.github.io/posts/emacs-mu4e/
- http://pragmaticemacs.com/category/mu4e/
- https://www.djcbsoftware.nl/code/mu/mu4e/HV-Overview.html
#+begin_src bash
export XAPIAN_CJK_NGRAM=true
mu init --my-address liujiacai@live.com --my-address hello@liujiacai.net -m ~/.mail
#+end_src

#+begin_src emacs-lisp
(use-package mu4e
  :load-path "/usr/local/opt/mu/share/emacs/site-lisp/mu/mu4e/"
  :if (executable-find "mu")
  :bind (:map mu4e-view-mode-map
         ("l" . mu4e-view-go-to-url)
         ("0" . scroll-down-command)
         ("9" . scroll-up-command)
         :map mu4e-compose-mode-map
         ("C-c '" . org-mime-edit-mail-in-org-mode))
  :custom ((mu4e-headers-fields '((:human-date    .   12)
                                  (:flags         .    6)
                                  (:from-or-to    .   22)
                                  (:thread-subject .  nil)))
           (mu4e-hide-index-messages t))
  :config
  (setenv "XAPIAN_CJK_NGRAM" "true")
  (require 'mu4e-contrib)
  (setq mu4e-contexts
		(list
         (make-mu4e-context
		  :name "ljc"
          :match-func (lambda (msg)
                        (when msg
                          (string-prefix-p "/ljc" (mu4e-message-field msg :maildir))))
          :vars '((mu4e-sent-folder . "/ljc/Sent Messages")
                  (mu4e-trash-folder . "/ljc/Deleted Messages")
                  (mu4e-refile-folder . "/ljc/Archive")
                  (mu4e-drafts-folder . "/ljc/Drafts")
                  (mu4e-maildir-shortcuts . ((:maildir "/ljc/INBOX" :key ?i)
                                             (:maildir "/ljc/Sent Messages" :key ?s)
                                             (:maildir "/ljc/Drafts" :key ?D)
                                             (:maildir "/ljc/Junk" :key ?j)
                                             (:maildir "/ljc/=pg-hackers" :key ?p)
                                             (:maildir "/ljc/=dev-news" :key ?d)
                                             (:maildir "/ljc/=GitHub" :key ?G)
                                             (:maildir "/ljc/=golang" :key ?g)
                                             (:maildir "/ljc/=clojure" :key ?c)
                                             (:maildir "/ljc/=mozilla" :key ?m)
                                             (:maildir "/ljc/=openjdk" :key ?o)
                                             (:maildir "/ljc/=prometheus-user" :key ?P)
                                             ))
                  ))
         (make-mu4e-context
		  :name "outlook"
          :match-func (lambda (msg)
                        (when msg
                          (string-prefix-p "/outlook" (mu4e-message-field msg :maildir))))
          :vars '((mu4e-sent-folder . "/outlook/Sent")
                  (mu4e-trash-folder . "/outlook/Deleted")
                  (mu4e-refile-folder . "/outlook/Archive")
                  (mu4e-drafts-folder . "/outlook/Drafts")
                  (user-mail-address . "liujiacai@live.com")
                  (smtpmail-smtp-service . 587)
                  (smtpmail-smtp-server . "smtp.office365.com")
                  (smtpmail-stream-type . starttls)
                  (mu4e-maildir-shortcuts . ((:maildir "/outlook/Inbox" :key ?i)
                                             (:maildir "/outlook/Sent" :key ?s)
                                             (:maildir "/outlook/Deleted" :key ?t)
                                             (:maildir "/outlook/Drafts" :key ?d)
                                             (:maildir "/outlook/Archive" :key ?a))))))
        user-mail-address "hello@liujiacai.net"
        user-full-name "Jiacai Liu"
        smtpmail-smtp-service 465
        smtpmail-smtp-server "smtp.exmail.qq.com"
        smtpmail-stream-type 'ssl
        message-send-mail-function 'smtpmail-send-it
        ;; https://emacs.stackexchange.com/a/45216/16450
        message-citation-line-format "\nOn %a, %b %d, %Y at %r %z, %N wrote:\n"
        message-citation-line-function 'message-insert-formatted-citation-line
        ;; message-cite-style message-cite-style-gmail
        mml-secure-openpgp-signers '("D3026E5C08A0BAB4")
        ;; mml-secure-openpgp-encrypt-to-self t
        mu4e-view-show-addresses t
        mu4e-view-show-images t
        mu4e-attachment-dir "~/Downloads"
        mu4e-sent-messages-behavior 'delete
        mu4e-context-policy 'pick-first
        mu4e-compose-context-policy 'ask-if-none
        mu4e-compose-dont-reply-to-self t
        mu4e-confirm-quit nil
        mu4e-headers-date-format "%+4Y-%m-%d"
        mu4e-view-date-format "%a, %Y-%m-%d %T"
        mu4e-view-html-plaintext-ratio-heuristic  most-positive-fixnum
        mu4e-update-interval (* 15 60)
        mu4e-get-mail-command "offlineimap -o"
        mu4e-compose-format-flowed t)
  (add-to-list 'mu4e-view-actions '("browser" . mu4e-action-view-in-browser) t)
  (add-to-list 'mu4e-view-fields :bcc)
  (add-to-list 'mu4e-bookmarks '(:name "All Inbox"
                                 :query "maildir:/ljc/INBOX or maildir:/outlook/Inbox"
                                 :key ?i))

  )

(use-package mu4e-maildirs-extension
  :if (executable-find "mu")
  :custom ((mu4e-maildirs-extension-custom-list
            '("/ljc/INBOX"
              "/ljc/Sent Messages"
              "/ljc/Drafts"
              "/ljc/=pg-hackers"
              "/ljc/=dev-news"
              "/ljc/=GitHub"
              "/ljc/=golang"
              "/ljc/=clojure"
              "/ljc/=mongodb-dev"
              "/ljc/=mozilla"
              "/ljc/=openjdk"
              "/ljc/=prometheus-user"
              "/ljc/Deleted Messages"
              "/ljc/Junk"

	          "/outlook/Inbox"
	          "/outlook/Sent"
	          "/outlook/Drafts"
	          "/outlook/Archive"
	          "/outlook/Deleted"
	          "/outlook/Junk"
	          "/outlook/Notes"
	          "/outlook/Outbox"
              )))
  :config
  (mu4e-maildirs-extension))

(use-package org-mime
  :config

  (defun my/org-mime-htmlize ()
    (let ((answer (read-from-minibuffer "Org htmlize? [y/n]:")))
      (when (string-equal "y" answer)
          (org-mime-htmlize))))

  (defun my/sign-or-encrypt-message ()
    (let ((answer (read-from-minibuffer "Sign or encrypt?[s/e]: ")))
      (cond
       ((string-equal answer "s") (progn
                                    (message "Signing message.")
                                    (mml-secure-message-sign-pgpmime)))
       ((string-equal answer "e") (progn
                                    (message "Encrypt and signing message.")
                                    (mml-secure-message-encrypt-pgpmime)))
       (t (progn
            (message "Dont signing or encrypting message.")
            nil)))))

  (defun my/send-message-hook ()
    (my/org-mime-htmlize)
    (my/sign-or-encrypt-message))

  (add-hook 'message-send-hook 'my/send-message-hook)
  (add-hook 'org-ctrl-c-ctrl-c-hook 'org-mime-org-buffer-htmlize t)
  (setq org-mime-export-ascii 'utf-8
        org-mime-export-options '(:section-numbers nil
                                  :with-author nil
                                  :with-toc nil)))

#+end_src

* Feed
- https://nullprogram.com/blog/2013/09/04/
- https://noonker.github.io/posts/2020-04-22-elfeed/
#+begin_src emacs-lisp
(use-package elfeed
  :custom ((elfeed-use-curl t)
           (elfeed-db-directory "~/Documents/elfeed/db/")
           (elfeed-curl-extra-arguments '("-x" "socks5h://localhost:13659")))
  :bind (:map elfeed-show-mode-map
         ("h" . evil-backward-char)
         ("8" . my/elfeed-toggle-star)
         :map elfeed-search-mode-map
         ("8" . my/elfeed-search-star)
         ("*" . my/elfeed-search-unstar))
  :init
  (defun my/elfeed-set-line-space ()
    (setq-local line-spacing 0.3))
  :hook (elfeed-search-mode . my/elfeed-set-line-space)
  :config
  (setq elfeed-search-filter "@6-months-ago +unread #50"
        shr-inhibit-images t
        elfeed-feeds '())
  (when-let ((ff-cmd (executable-find "firefox")))
    (setq
     browse-url-browser-function 'browse-url-generic
     browse-url-generic-program ff-cmd))

  ;; (elfeed-load-opml "~/Documents/Inoreader Subscriptions 20210228.xml")
  (evil-make-overriding-map elfeed-show-mode-map 'motion)
  (evil-make-overriding-map elfeed-search-mode-map 'motion)
  (defun my/show-feed-images ()
    (interactive)
    (let ((shr-inhibit-images nil))
      (elfeed-show-refresh)))
  ;;functions to support syncing .elfeed between machines
  ;;makes sure elfeed reads index from disk before launching
  (defun my/elfeed-open-db-and-load ()
    "Wrapper to load the elfeed db from disk before opening"
    (interactive)
    (elfeed-db-load)
    (elfeed)
    (elfeed-search-update--force))

  ;;write to disk when quiting
  (defun my/elfeed-close-db-and-save ()
    "Wrapper to save the elfeed db to disk before burying buffer"
    (interactive)
    (elfeed-db-save)
    ;; (quit-window)
    )

  (defun my/elfeed-toggle-star ()
    (interactive)
    (when elfeed-show-entry
      (let ((tag (intern "starred")))
        (if (elfeed-tagged-p tag elfeed-show-entry)
            (elfeed-untag elfeed-show-entry tag)
          (elfeed-tag elfeed-show-entry tag)))
      (elfeed-show-refresh)))

  (defun my/elfeed-search-star ()
    (interactive)
	(let ((tag (intern "starred"))
          (entries (elfeed-search-selected)))
	  (cl-loop for entry in entries do (elfeed-tag entry tag))
	  (mapc #'elfeed-search-update-entry entries)
	  (unless (use-region-p) (forward-line))))

  (defun my/elfeed-search-unstar ()
    "Remove starred tag from all selected entries."
    (interactive)
	(let ((tag (intern "starred"))
          (entries (elfeed-search-selected)))
	  (cl-loop for entry in entries do (elfeed-untag entry tag))
	  (mapc #'elfeed-search-update-entry entries)
	  (unless (use-region-p) (forward-line))))

  ;; face for starred articles
  (defface elfeed-search-starred-title-face
    '((t :foreground "#f77"))
    "Marks a starred Elfeed entry.")

  (push '(starred elfeed-search-starred-title-face) elfeed-search-face-alist)
  )

(use-package elfeed-dashboard
  :config
  (setq elfeed-dashboard-file (expand-file-name "elfeed-dashboard.org" no-littering-etc-directory))
  ;; update feed counts on elfeed-quit
  (advice-add 'elfeed-search-quit-window :after #'elfeed-dashboard-update-links))

(use-package elfeed-org
  :custom ((rmh-elfeed-org-files `(,(no-littering-expand-etc-file-name "elfeed-feeds.org"))))
  :config
  (defun my/reload-org-feeds ()
    (interactive)
    (rmh-elfeed-org-process rmh-elfeed-org-files rmh-elfeed-org-tree-id))
  (advice-add 'elfeed-dashboard :before #'my/reload-org-feeds)
  (elfeed-org))
#+end_src
* Calendar
#+begin_src emacs-lisp
(use-package cal-china
  :ensure nil
  :custom (;; (calendar-chinese-celestial-stem ["甲" "乙" "丙" "丁" "戊" "己" "庚" "辛" "壬" "癸"])
           ;; (calendar-chinese-terrestrial-branch ["子" "丑" "寅" "卯" "辰" "巳" "午" "未" "申" "酉" "戌" "亥"])
           (calendar-mark-holidays-flag t))
  :config
  (evil-make-overriding-map calendar-mode-map 'motion)
  :bind (:map calendar-mode-map
              ("h" . calendar-backward-day)
              ("l" . calendar-forward-day)
              ("k" . calendar-backward-week)
              ("j" . calendar-forward-week)))

(use-package cal-china-x
  :config
  (setq cal-china-x-important-holidays '((holiday-lunar 2 19 "家财生日")
                                         (holiday-lunar 5 1 "家钰生日")
                                         (holiday-lunar 6 29 "家辉生日")
                                         (holiday-lunar 11 13 "万燕生日"))
        cal-china-x-general-holidays (append cal-china-x-chinese-holidays
                                             '((holiday-lunar 1 15 "元宵节")))

        calendar-holidays (append holiday-general-holidays holiday-local-holidays
                                  holiday-other-holidays holiday-christian-holidays
                                  holiday-solar-holidays
                                  cal-china-x-important-holidays cal-china-x-general-holidays)))

(use-package calfw
  :commands cfw:open-calendar-buffer)
#+end_src
* EWW
#+begin_src emacs-lisp
(use-package eww
  :ensure nil
  :config
  (setq eww-search-prefix "https://www.google.com/search?q="
        ))

#+end_src
* Others
#+BEGIN_SRC emacs-lisp
(use-package restclient
  :load-path "~/.emacs.d/vendor/restclient"
  :mode ("\\.api\\'" . restclient-mode))

(use-package protobuf-mode
  :load-path "~/.emacs.d/vendor/protobuf-mode"
  :mode ("\\.proto\\'" . protobuf-mode))

;; https://github.com/justbur/emacs-which-key
(use-package which-key
  :config
  (which-key-mode)
  (defun my/major-mode-keymap ()
    (interactive)
    (which-key-show-full-keymap `,(intern (format "%s-map" major-mode))
                                )))

(use-package chronos
  :config
  (defun my/chronos-shell-notify (c)
    "Notify expiration of timer C by running a shell command.
https://gist.github.com/bravosierrasierra/59d6d0c1ddff46a1b87b18738cecf8a2"
    (if (eq system-type 'darwin)
        (chronos--shell-command "Chronos shell notification for Mac OS X"
                                "terminal-notifier"
                                (list "-sound" "default" "-title" "TIME OVER" "-message" (chronos--message c))
                                )
      (chronos--shell-command "Chronos shell notification for Linux & Windows"
                              "notify-send"
                              (list "-t" "3600000" "TIME OVER" (chronos--message c))))
    ;; 24*60*60*1000 = 86400000  60*60*1000 = 3600000
    )
  (defun my/stop-expired-timer (c)
    (chronos--pause c))

  (setq chronos-expiry-functions '(chronos-buffer-notify
                                   my/chronos-shell-notify
                                   chronos-message-notify
                                   my/stop-expired-timer)))

(use-package helpful
  :bind (("C-h f" . helpful-callable)
         ("C-h v" . helpful-variable)
         ("C-h k" . helpful-key)))

(use-package easy-hugo
  :commands (easy-hugo-with-env)
  :init
  (defun my/hugo-newpost (slug title tags categories)
    (interactive "sSlug: \nsTitle: \nsTags: \nsCategories: ")
    (easy-hugo-with-env
     (let* ((now (current-time))
		    (basename (concat (format-time-string "%Y-%m-%d-" now)
							  slug easy-hugo-default-ext))
		    (postdir (expand-file-name easy-hugo-postdir easy-hugo-basedir))
		    (filename (expand-file-name basename postdir)))
	   (when (file-exists-p filename)
         (error "%s already exists!" filename))
	   (find-file filename)
	   (insert
	    (format "#+TITLE: %s\n#+DATE: %s\n#+TAGS[]: %s\n#+CATEGORIES[]: %s\n"
                title (my/iso-8601-date-string) tags categories))
	   (goto-char (point-max))
	   (save-buffer))))
  :bind (:map easy-hugo-mode-map
         ("w" . my/hugo-newpost))
  :custom ((easy-hugo-basedir  "~/gh/jiacai2050.github.io/")
		   (easy-hugo-url  "https://liujiacai.net")
           (easy-hugo-default-ext ".org")
           (easy-hugo-bloglist '(((easy-hugo-basedir . "~/gh/en-blog/")
                                  (easy-hugo-default-ext ".org")
		                          (easy-hugo-url . "https://en.liujiacai.net"))))))

(defun my/google-search ()
  "Googles a query or region if any."
  (interactive)
  (ivy-read "Google: " nil
            :action (lambda (q)
                      (browse-url
                       (concat
                        "http://www.google.com/search?ie=utf-8&oe=utf-8&q=" q)))))


(defalias '-> 'thread-first)
(defalias '->> 'thread-last)
#+END_SRC
